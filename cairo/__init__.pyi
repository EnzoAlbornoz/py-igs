from typing import Any, Tuple, List, Optional
# Stub Class For Cairo
class Context:
    def __init__(self, target: Any) -> None: ...
    def append_path(self, path: Any) -> None: ...
    def arc(self, xc: float, yc: float, radius: float, angle1: float, angle2: float) -> None: ...
    def arc_negative(self, xc: float, yc: float, radius: float, angle1: float, angle2: float) -> None: ...
    def clip(self) -> None: ...
    def clip_extents(self) -> Tuple[float, float, float, float]: ...
    def clip_preserve(self) -> None: ...
    def close_path(self) -> None: ...
    def copy_clip_rectangle_list(self) -> None: ...
    def copy_page(self) -> None: ...
    def copy_path(self) -> None: ...
    def copy_path_flat(self) -> None: ...
    def curve_to(self, x1: float, y1: float, x2: float, y2: float, x3: float, y3: float) -> None: ...
    def device_to_user(self, x: float, y: float) -> Tuple[float, float]: ...
    def device_to_user_distance(self, dx: float, dy: float) -> Tuple[float, float]: ...
    def fill(self) -> None: ...
    def fill_extents(self) -> Tuple[float, float, float, float]: ...
    def fill_preserve(self) -> None: ...
    def font_extents(self) -> Tuple[float, float, float, float, float]: ...
    def get_antialias(self) -> None: ...
    def get_current_point(self) -> Tuple[float, float]: ...
    def get_dash(self) -> Tuple[Tuple[Any], float]: ...
    def get_dash_count(self) -> int: ...
    def get_fill_rule(self) -> Any: ...
    def get_font_face(self) -> Any: ...
    def get_font_matrix(self) -> Matrix: ...
    def get_font_options(self) -> Any: ...
    def get_group_target(self)  -> Any: ...
    def get_line_cap(self) -> Any: ...
    def get_line_join(self) -> Any: ...
    def get_line_width(self) -> float: ...
    def get_matrix(self) -> Matrix: ...
    def get_miter_limit(self) -> float: ...
    def get_operator(self) -> Any: ...
    def get_scaled_font(self) -> Any: ...
    def get_source(self) -> Any: ...
    def get_target(self) -> Any: ...
    def get_tolerance(self) -> float: ...
    def glyph_extents(self, glyphs: List[Any]) -> Any: ...
    def glyph_path(self, glyphs: List[Any]) -> Any: ...
    def has_current_point(self) -> bool: ...
    def identity_matrix(self) -> Matrix: ...
    def in_fill(self, x: float, y: float) -> bool: ...
    def in_stroke(self, x: float, y: float) -> bool: ...
    def line_to(self, x: int | float, y: int | float) -> None: ...
    def mask(self, pattern: Any) -> None: ...
    def mask_surface(self, surface: Any, x: float = ..., y: float = ...) -> None: ...
    def move_to(self, x: int | float, y: int | float) -> None: ...
    def new_path(self) -> None: ...
    def new_sub_path(self) -> None: ...
    def paint(self) -> None: ...
    def paint_with_alpha(self, alpha: float) -> None: ...
    def path_extents(self) -> Tuple[float, float, float, float]: ...
    def pop_group(self) -> Any: ...
    def pop_group_to_source(self) -> None: ...
    def push_group(self) -> None: ...
    def push_group_with_content(self, content: Any) -> None: ...
    def rectangle(self, x: float, y: float, width: float, height: float) -> None: ...
    def rel_curve_to(self, dx1: float, dy1: float, dx2: float, dy2: float, dx3: float, dy3: float) -> None: ...
    def rel_line_to(self, dx: float, dy: float) -> None: ...
    def rel_move_to(self, dx: float, dy: float) -> None: ...
    def reset_clip(self) -> None: ...
    def restore(self) -> None: ...
    def rotate(self, angle: float) -> None: ...
    def save(self) -> None: ...
    def scale(self, sx: float, sy: float) -> None: ...
    def select_font_face(self, family: Any, slant: Optional[Any], weight: Optional[Any]) -> None: ...
    def set_antialias(self, antialias: Any) -> None: ...
    def set_dash(self, dashes: List[Any], offset: float = ...) -> None: ...
    def set_fill_rule(self, fill_rule: Any) -> None: ...
    def set_font_face(self, font_face: Any) -> None: ...
    def set_font_matrix(self, matrix: Any) -> Matrix: ...
    def set_font_options(self, options: Any) -> None: ...
    def set_font_size(self, size: float) -> None: ...
    def set_line_cap(self, line_cap: Any) -> None: ...
    def set_line_join(self, line_join: Any) -> None: ...
    def set_line_width(self, width: float) -> None: ...
    def set_matrix(self, matrix: Matrix) -> None: ...
    def set_miter_limit(self, limit: float) -> None: ...
    def set_operator(self, op: Any) -> None: ...
    def set_scaled_font(self, scaled_font: Any) -> None: ...
    def set_source(self, source: Any) -> None: ...
    def set_source_rgb(self, red: float, green: float, blue: float) -> None: ...
    def set_source_rgba(self, red: float, green: float, blue: float, alpha: Optional[float] = ...) -> None: ...
    def set_source_surface(self, surface: Any, x: Optional[float] = ..., y: Optional[float] = ...) -> None: ...
    def set_tolerance(self, tolerance: float) -> None: ...
    def show_glyphs(self, glyphs: List[Any]) -> None: ...
    def show_page(self) -> None: ...
    def show_text(self, text: str) -> None: ...
    def stroke(self) -> None: ...
    def stroke_extents(self) -> Tuple[float, float, float, float]: ...
    def stroke_preserve(self) -> None: ...
    def text_extents(self, text: str) -> Any: ...
    def text_path(self, text: str) -> None: ...
    def transform(self, matrix: Matrix) -> None: ...
    def translate(self, tx: float, ty: float) -> None: ...
    def user_to_device(self, x: float, y: float) -> Tuple[float, float]: ...
    def user_to_device_distance(self, dx: float, dy: float) -> Tuple[float, float]: ...
    def in_clip(self, x: float, y: float) -> bool: ...
    def show_text_glyphs(self, utf8: str, glyphs: List[Any], clusters: List[Any], cluster_flags: Any) -> None: ...
    def stroke_to_path(self) -> None: ...
    def tag_begin(self, tag_name: str, attributes: str) -> None: ...
    def tag_end(self, tag_name: str) -> None: ...

class Matrix:
    def __init__(self, xx: float = ..., yx: float = ..., xy: float = ..., yy: float = ..., x0: float = ..., y0: float = ...) -> None: ...
    @classmethod
    def init_rotate(cls, radians: float) -> Matrix: ...
    def invert(self) -> None: ...
    def multiply(self, matrix2: Matrix) -> Matrix: ...
    def rotate(self, radians: float) -> None: ...
    def scale(self, sx: float, sy: float) -> None: ...
    def transform_distance(self, dx: float, dy: float) -> Tuple[float, float]: ...
    def transform_point(self, x: float, y: float) -> Tuple[float, float]: ...
    def translate(self, tx: float, ty: float) -> None: ...
    xx: float
    yx: float
    xy: float
    yy: float
    x0: float
    y0: float